name: Foodgram workflow

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
      - dev
    paths-ignore:
      - '**README.md'

jobs:
  # tests:
  #   runs-on: ubuntu-latest
  #   services:
  #     postgres:
  #       image: postgres:latest
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_DB: github_actions_db
  #       ports:
  #         - 5432:5432
  #       options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Set up Python 3.8
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: 3.8
    
  #   - name: install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       cd backend
  #       pip install -r requirements.txt
  #       pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
    
  #   - name: run migrations
  #     run : |
  #       cd backend/api_foodgram
  #       export SECRET_KEY=${{ secrets.SECRET_KEY }}
  #       python manage.py makemigrations
  #       python manage.py migrate
    
  #   - name: flake8 and pytest
  #     run: |
  #       cd backend
  #       export SECRET_KEY=${{ secrets.SECRET_KEY }}
  #       python -m flake8 --exclude migrations,settings.py --ignore I001,I004
  #       pytest
    
  #   - name: notify if failed
  #     if: ${{ failure() }}
  #     uses: appleboy/telegram-action@master
  #     with:
  #       to: ${{ secrets.TELEGRAM_TO }}
  #       token: ${{ secrets.TELEGRAM_TOKEN }}
  #       message: ${{ github.workflow }} - Job ${{ job.name }} failed with err code ${{ job.conclusion }}
  
  # push_new_img_to_dhub:
  #   name: Push new backend image to Docker Hub
  #   runs-on: ubuntu-latest
  #   needs: tests
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Docker buildx
  #       uses: docker/setup-buildx-action@v1
  #     - name: Login
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: push
  #       uses: docker/build-push-action@v2
  #       with:
  #         push: true
  #         tags: ${{ secrets.DOCKER_USERNAME }}/api_foodgram:latest
  #         context: backend/
  #         file: backend/Dockerfile
  #     - name: notify if failed
  #       if: ${{ failure() }}
  #       uses: appleboy/telegram-action@master
  #       with:
  #         to: ${{ secrets.TELEGRAM_TO }}
  #         token: ${{ secrets.TELEGRAM_TOKEN }}
  #         message: ${{ github.workflow }} - Job ${{ job.name }} failed with err code ${{ job.conclusion }}
  
  deploy:
    runs-on: ubuntu-latest
    # needs: push_new_img_to_dhub
    if: github.ref == 'refs/heads/master'
    steps:
    - name: execute remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
        script: |
          git clone https://github.com/Turianpy/foodgram-project-react.git || (cd foodgram-project-react && git pull origin master)
          cd foodgram-project-react/infra
          sudo docker-compose down -v
          rm .env
          touch .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
          echo DB_ENGINE=django.db.backends.postgresql >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          echo DJANGO_DEBUG=False >> .env
          sudo docker-compose up -d
          sudo docker exec -i infra_backend_1 bash -c "python manage.py makemigrations; python manage.py migrate; python manage.py collectstatic --noinput"
    - name: notify if failed
      if: ${{ failure() }}
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} - Job ${{ job.name }} failed with err code ${{ job.conclusion }}
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send msg
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} - completed successfully